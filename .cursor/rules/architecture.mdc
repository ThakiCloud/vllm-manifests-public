---
description: 
globs: 
alwaysApply: true
---
# Architecture

## 시스템 아키텍처 개요
VLLM 평가 시스템은 GitOps 원칙에 따라 ArgoCD로 관리되며, 이벤트 기반 또는 수동으로 트리거되는 잡(Job)을 통해 모델 성능을 평가하는 구조로 설계되었습니다.

## Layer 구성

### 1. Trigger Layer (실행 유발)
- **Source**: Git Repository (`vllm-manifests`)
- **Mechanism**: ArgoCD가 Git 리포지토리의 변경 사항을 감지하고 Kubernetes 클러스터에 평가용 리소스(Job 등)를 동기화합니다.
- **Automation (Optional)**: 외부 CI/CD 파이프라인(예: GitHub Actions) 또는 Argo Events를 연동하여 특정 이벤트(예: 새 모델 이미지 푸시) 발생 시 자동으로 평가 잡을 실행하는 흐름을 구성할 수 있습니다.

### 2. Execution Layer (워크플로 실행)
**Kubernetes Job 기반의 평가 단계**:
1.  **`vllm-benchmark-job`**: vLLM 엔드포인트에 대한 부하 벤치마크를 수행하여 처리량(throughput), 지연 시간(latency) 등을 측정합니다. (기존 `deepeval-runner` 역할)
2.  **`evalchemy-job`**: 특정 데이터셋과 구성(`eval_config.json`)을 바탕으로 모델의 정성적, 정량적 성능을 평가합니다.
3.  **(Implicit) `aggregate-metrics`**: (구현에 따라) 각 잡의 결과물(PVC에 저장된 JSON/로그 파일)을 취합하여 데이터베이스에 저장하거나 리포트를 생성하는 후처리 단계가 있을 수 있습니다.

### 3. Storage Layer (데이터 저장)
- **Raw Results & Logs**: Kubernetes **PersistentVolumeClaim (PVC)** (`model-results-pvc`, `parsed-results-pvc`)을 통해 원시 결과 파일(JSON, 로그 등)을 저장합니다. 7일 등 보존 정책은 스토리지 클래스나 별도 정책으로 관리될 수 있습니다.
- **Aggregated Metrics**: (확장 시) PVC에 저장된 원시 데이터를 가공하여 **ClickHouse**나 다른 데이터베이스의 테이블(e.g., `vllm_eval.results`)에 집계/저장할 수 있습니다.
- **Dataset & Snapshot**: (확장 시) 평가에 사용될 데이터셋은 **MinIO**와 같은 오브젝트 스토리지에 저장하고 관리할 수 있습니다.

### 4. Observability Layer (모니터링 및 알림)
- **메트릭**: `monitoring/` 디렉토리의 Prometheus 스택을 통해 평가 잡의 실행 상태(성공, 실패), 실행 시간 등 Kubernetes API 메트릭을 수집합니다.
- **시각화**: Grafana 대시보드를 통해 평가 파이프라인의 상태를 모니터링합니다. (e.g., `LLM Eval Status`)
- **알림**: (구현에 따라) Prometheus Alertmanager와 연동하여 잡 실패 시 **Microsoft Teams** 등으로 알림을 보낼 수 있습니다.
- **감사 추적**: 모든 실행 결과는 PVC에 로그 파일로 보존됩니다.

## 데이터 플로우 (예시)
```
Git Commit/Push -> ArgoCD Sync -> K8s Job (Benchmark, Evalchemy) ->
PVC에 결과 저장 -> (Optional) Aggregator가 결과 처리 -> 
ClickHouse 저장 & Grafana 시각화 & Teams 알림
```

## 컨테이너 전략
- **Base Images**: `ghcr.io/thakicloud/vllm-eval-*` 이미지를 사용하여 각 평가 단계에 최적화된 환경을 제공합니다.
- **Configuration**: Job Spec의 환경 변수와 ConfigMap을 통해 각 실행의 파라미터(모델 이름, 엔드포인트 등)를 주입합니다.
- **Security**: `ghcr-secret`을 사용하여 Private 컨테이너 레지스트리에서 이미지를 안전하게 Pull합니다.
